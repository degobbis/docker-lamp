#!/usr/bin/env bash

# Define debug mode.
DEBUG=0

# Define the basedir for the docker compose.
DOCKER_LAMP_BASEDIR="$(dirname "$(realpath $0)")"

# Load the functions for the script
. $DOCKER_LAMP_BASEDIR/.config/functions.sh

# Test if docker ist installed an the deamon is startet
if [[ "$(command docker >/dev/null 2>&1 ; echo $?)" -ne 0 ]]; then
    error "Can't find docker, is it installed?"
    exit 127
fi

if [[ "$(docker info >/dev/null 2>&1 ; echo $?)" -ne 0 ]]; then
    error "The docker deamon is not running. Please start it before."
    exit 1
fi

# If called without command, return help and exit.
[ "$#" -eq 0 ] && usage | more -d && exit 1

# Define the basedir for the .env file
ENV_FILE_BASEDIR="$(pwd)"
ENV_FILE="$ENV_FILE_BASEDIR/.env"

if [ -f "$ENV_FILE" ]; then
    ENV_FILE_LOADED="$(. $ENV_FILE 2>&1)"

    [ ! -z "$ENV_FILE_LOADED" ] && error "Something is wrong in the '.env' file!" \
        && warn "-> $ENV_FILE_LOADED" \
        && exit 1

    # Load the user configuration
    . $ENV_FILE
else
    error "No '.env' file found in '$ENV_FILE_BASEDIR'!"
    warn "Please copy '$DOCKER_LAMP_BASEDIR/.env-example' to '$ENV_FILE' and define Your preferred configuration,"
    warn "or change to the directory, where the '.env' file is."
    exit 1
fi

DOCKER_COMPOSE_YAML="$ENV_FILE_BASEDIR/compose.yml"
DOCKER_COMPOSE_CALL="docker-compose --env-file $ENV_FILE -f $DOCKER_COMPOSE_YAML"

MINICA_DEFAULT_DOMAINS="localdomains,localhost,joomla.local,joomla.test,*.joomla.local,*.joomla.test,wp.local,wp.test,*.wp.local,*.wp.test,wpms.local,wpms.test,*.wpms.local,*.wpms.test"

# define the command, the argument and the parameters allowed for the command
case "$1" in
    *)
        [ "$1" = "--help" ] && usage | more -d && exit 0
        [ "$2" = "--help" ] && usage $1 | more -d && exit 0
        ;;&
    start|restart|stop|shutdown|create-certs|update-images|delete-obsolete-images|save-db|restore-db|cli)
        COMMAND="$1"
        ARGUMENT=""
        shift
        ;;&
    start)
        LONG="php: httpd: db: map-80-443: bind-off bind-on"
        SHORT="p: H: d: m:"
        ;;
    shutdown)
        LONG="archive-folder: archive skip-save-db"
        SHORT="f: a s"
        ;;
    save-db)
        ARGUMENT="$1"
        shift
        LONG="archive-folder: archive"
        SHORT="f: a"
       ;;
    cli)
        CLI_CONTAINER="$1"
        shift
        _TMP=""
        while [ ! -z "$1" ]; do
            if [[ $1 == -* ]]; then
                _TMP="$_TMP $1"
            else
                COMMAND_TO_PASS="$1"
            fi
            shift
        done
        _TMP=$(echo "$_TMP" | xargs)
        [ ! -z "$_TMP" ] && set -- $_TMP
        LONG="as-root xdebug"
        SHORT="r x"
        ;;
esac

[ -z "$COMMAND" ] && error "Wrong command!" && warn "For help call '$0 --help'." && exit 1

if [ "$COMMAND" = "start" ] \
    && ([ -f "$DOCKER_COMPOSE_YAML" ] && [ ! -z "$($DOCKER_COMPOSE_CALL ps -q)" ]); then
        error "Server is already running."
        exit 1
fi

if [ "$COMMAND" = "restart" ]; then
    restart_server
    exit 0
fi

if [ "$COMMAND" = "stop" ]; then
    stop_server
    exit 0
fi

if [ "$COMMAND" = "create-certs" ]; then
    create_certs
    exit 0
fi

if [ "$COMMAND" = "update-images" ]; then
    update_images
    exit 0
fi

if [ "$COMMAND" = "delete-obsolete-images" ]; then
    delete_obsolete_images
    exit 0
fi

if [ "$COMMAND" = "restore-db" ]; then
    restore_db
    exit 0
fi

headline "----------------------"
log "COMMAND: $COMMAND"
log "ARGUMENT: $ARGUMENT"
log "CLI_CONTAINER: $CLI_CONTAINER"
log "COMMAND_TO_PASS: $COMMAND_TO_PASS"
log "SHORT: $SHORT"
log "LONG: $LONG"


headline "before getopt"
log "\$@:" "$@"
log "\$1: $1"
log "\$2: $2"

OPTIONS=$(getopt -q -o "$SHORT" -l "$LONG" -n "$0" -- "$@")

if [ "$?" -eq 1 ]; then
    error "The parameter" "$@" "is not set correctly!"
    warn "For help call '$0 --help'."
    exit 1
fi

log "\$OPTIONS: $OPTIONS"

eval set -- "$OPTIONS"

headline "after getopt"
log "\$@:" "$@"
log "\$1: $1"
log "\$2: $2"

SHORT="-$(echo "$SHORT" | sed "s/://g" | sed "s/ / -/g")"
log "SHORT:" "$SHORT"

LONG="--$(echo "$LONG" | sed "s/://g" | sed "s/ / --/g")"
log "LONG:" "$LONG"

CASE="$SHORT $LONG"
log "CASE:" "$CASE"

headline "Evaluate parameters"
while true; do
    log "--------------"
    log "Parameter: $1"

    if [ -z "${CASE##*$1*}" ]; then
         case "$1" in
            -H | --httpd)
                HTTPD_TO_USE="$2"
                log "set HTTPD_TO_USE to '$2'"
                shift 2
                ;;
            -p | --php)
                PHP_TO_USE="$2"
                log "set PHP to '$2'"
                shift 2
                ;;
            --bind-on)
                USE_BIND=1
                log "set BIND on"
                shift
                ;;
            --bind-off)
                USE_BIND=0
                log "set BIND off"
                shift
                ;;
            -s | --skip-save-db)
                SKIP_SAVE_DATABASES=1
                shift
                ;;
            -a | --archive)
                ARCHIVE_DATABASES=1
                shift
                ;;
            -f | --archive-folder)
                ARCHIVE_FOLDER="$2"
                log "set ARCHIVE_FOLDER to '$2'"
                shift 2
                ;;
            -d | --db)
                DATABASE_TO_USE="$2"
                shift 2
                ;;
            -r | --as-root)
                AS_ROOT="1"
                log "enter CLI as root"
                shift
                ;;
            -x | --xdebug)
                CLI_WITH_XDEBUG="1"
                log "enter CLI with xDebug enabled"
                shift
                ;;
            --)
                shift
                break
                ;;
        esac
    else
        error "The parameter '$1' is not allowed here!"
        exit 1
    fi
done

if [ -n "$1" ]; then
    error "The argument '$1' is not allowed at this place!"
    warn "For help call '$0 --help'."
    exit 1
fi

if [ "$COMMAND" = "save-db" ]; then
    save_db
    exit 0
fi

if [ "$COMMAND" = "cli" ]; then
    cli_container
    exit 0
fi

if [ "$COMMAND" = "shutdown" ]; then
    shutdown_server
    exit 0
fi

PHP_TO_USE=$(echo "$PHP_TO_USE" | sed "s/, / /g" | sed "s/,/ /g")

headline "after editing the parameters"
log "\$@:" "$@"
log "\$1: $1"
log "HTTPD_TO_USE: $HTTPD_TO_USE"
log "PHP_TO_USE: $PHP_TO_USE"

MAP_PORT_80=$(eval echo "\$$(echo "${MAP_PORT_80_443}" | awk '{print toupper($0)}')_PORT")
MAP_PORT_443=$(eval echo "\$$(echo "${MAP_PORT_80_443}" | awk '{print toupper($0)}')_PORT_SSL")

HTTPD_PORT_PHP56="8056"
HTTPD_SSL_PORT_PHP56="8456"
HTTPD_PORT_PHP73="8073"
HTTPD_SSL_PORT_PHP73="8473"
HTTPD_PORT_PHP74="8074"
HTTPD_SSL_PORT_PHP74="8474"
HTTPD_PORT_PHP80="8080"
HTTPD_SSL_PORT_PHP80="8480"
HTTPD_PORT_PHP81="8081"
HTTPD_SSL_PORT_PHP81="8481"
HTTPD_PORTS_LIST="80:$MAP_PORT_80 443:$MAP_PORT_443 8000:8000 8400:8400"

# Define the LOAD_YAML variable with the base YAML-Config
add_yaml_to_load base

# Add phpmyadmin YAML-Config to LOAD_YAML
add_yaml_to_load phpmyadmin
HTTPD_LINKS_LIST="phpmyadmin"

# Add mailhog YAML-Config to LOAD_YAML
add_yaml_to_load mailhog

# Add BIND support, if not disabled
if [ -z "$BIND_OFF" ]; then
    add_yaml_to_load bind
    HTTPD_LINKS_LIST="bind $HTTPD_LINKS_LIST"
fi

# Add HTTPD YAML-Config to LOAD_YAML
add_yaml_to_load httpd/$HTTPD_TO_USE

for var in $PHP_TO_USE; do
    PHP_PORT=$(eval echo "\$$(echo "${var}" | awk '{print toupper($0)}')_PORT")
    PHP_SSL_PORT=$(eval echo "\$$(echo "${var}" | awk '{print toupper($0)}')_PORT_SSL")
    HTTPD_PHP_PORT=$(eval echo "\$$(echo "${var}" | awk '{print toupper($0)}')_PORT")
    HTTPD_PHP_SSL_PORT=$(eval echo "\$$(echo "${var}" | awk '{print toupper($0)}')_PORT_SSL")

    # Add php versions YAML-Config to LOAD_YAML
    add_yaml_to_load php/$var

    # Define the ports to map into the HTTPD container
    HTTPD_PORTS_LIST="$HTTPD_PORTS_LIST $PHP_PORT:$HTTPD_PHP_PORT $PHP_SSL_PORT:$HTTPD_PHP_SSL_PORT"
done

# Exdend the links list of the HTTPD container with the loaded php versions
HTTPD_LINKS_LIST="$HTTPD_LINKS_LIST $PHP_TO_USE"

# Exdend the ports list of the HTTPD container with the custom ports defined
[ ! -z "$HTTPD_CUSTOM_PORTS" ] && HTTPD_PORTS_LIST="$HTTPD_PORTS_LIST $HTTPD_CUSTOM_PORTS"

# Add database YAML-Config to LOAD_YAML
add_yaml_to_load db/$DATABASE_TO_USE

echo
log "HTTPD_PORTS_LIST: $HTTPD_PORTS_LIST"
log "HTTPD_LINKS_LIST: $HTTPD_LINKS_LIST"

export HTTPD_PORTS=$(get_yaml_list "$HTTPD_PORTS_LIST")
export HTTPD_LINKS=$(get_yaml_list "$HTTPD_LINKS_LIST")

echo
log "HTTPD_PORTS: $HTTPD_PORTS"
log "HTTPD_LINKS: $HTTPD_LINKS"
log "DOCKER_LAMP_BASEDIR: $DOCKER_LAMP_BASEDIR"
log "BACKUP_FOLDER: $BACKUP_FOLDER"
log "APP_BASEDIR: $APP_BASEDIR"
log "LOAD_YAML: $LOAD_YAML"

[ -f "$DOCKER_COMPOSE_YAML" ] && rm -f $DOCKER_COMPOSE_YAML
( echo "cat <<EOF > $DOCKER_LAMP_BASEDIR/compose.yml";
  cat $LOAD_YAML;
  echo "EOF";
) > $DOCKER_LAMP_BASEDIR/temp.yml
. $DOCKER_LAMP_BASEDIR/temp.yml
rm -f $DOCKER_LAMP_BASEDIR/temp.yml


#exit 1

if [ "$COMMAND" = "start" ]; then
    start_server
    exit 0
fi
